VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "Form_frmEventEdit"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Option Compare Database
Option Explicit

' Form-level variables to track changes and control saving
Private m_OriginalValues As New Collection
Private m_AllowSave As Boolean
Private m_FormLoading As Boolean

Private Sub btnViewChart_Click()
    On Error GoTo ErrorHandler
    
    Dim mEventID As Long
    mEventID = Me.txtEventID
    
    ' Validate that we have an EventID and chart exists
    If mEventID = 0 Then
        MsgBox "No event record found.", vbExclamation, "No Record"
        Exit Sub
    End If
    
    ' Double-check that chart exists
    If Not GetChartStatus(mEventID) Then
        MsgBox "No event chart found for this event. Please generate a chart first.", vbExclamation, "No Chart"
        Exit Sub
    End If
    
    ' Get the ChartID for this event's natal chart
    Dim chartID As Long
    chartID = GetEventChartID(mEventID)
    
    If chartID = 0 Then
        MsgBox "Unable to find event chart in database. Please regenerate the chart.", vbExclamation, "Chart Not Found"
        Exit Sub
    End If
    
    ' Open the aspect grid with the natal chart
    DoCmd.OpenForm "frmAspectHalfGrid", acNormal, , , , , CStr(chartID)
    
    Exit Sub
    
ErrorHandler:
    MsgBox "Error opening event chart view: " & Err.Description, vbExclamation, "Error"
End Sub


Private Function GetEventChartID(EventID As Long) As Long
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    sql = "SELECT ChartID FROM tblCharts WHERE EventID = " & EventID & " AND ChartType = 'Event'"
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If Not rs.EOF Then
        GetEventChartID = rs!chartID
    Else
        GetEventChartID = 0
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    GetEventChartID = 0
    If Not rs Is Nothing Then
        On Error Resume Next
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function


Private Function GetChartStatus(EventID As Long) As Boolean
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    sql = "SELECT EventChartGenerated FROM tblEvents WHERE EventID = " & EventID
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If Not rs.EOF Then
        GetChartStatus = Nz(rs!EventChartGenerated, False)
    Else
        GetChartStatus = False
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    GetChartStatus = False
    If Not rs Is Nothing Then
        On Error Resume Next
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

' === Form Events ===

Private Sub Form_Load()
    ' Set up the Country combo box
    Me.cboCountry.RowSource = "SELECT Country_Name FROM lu_Country ORDER BY Country_Name"
    Me.cboCountry.ColumnCount = 1
    Me.cboCountry.BoundColumn = 1
    Me.cboCountry.ColumnWidths = "2.5in"
    Me.cboCountry.LimitToList = True  ' This prevents users from entering values not in the list

    m_FormLoading = True
    m_AllowSave = False

    ' Load data if EventID was passed via OpenArgs
    If Not IsNull(Me.openArgs) And Len(Me.openArgs) > 0 Then
        LoadEventData CLng(Me.openArgs)
    End If

    ' Store original values for comparison
    StoreOriginalValues
    
    ' Initialize chart controls
    UpdateChartControls

    m_FormLoading = False
End Sub

Private Sub LoadEventData(EventID As Long)
    ' Load event data from database into unbound controls
    On Error GoTo LoadError
    
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    
    Set db = CurrentDb()
    
    'Query to get event data
    
    sql = "SELECT e.*, l.City, l.[StateProvince] AS StateProvince, l.Country, l.Latitude, " & _
          "l.Longitude, ht.Team AS HomeTeam, vt.Team AS VisitorTeam " & _
          "FROM (((tblEvents AS e " & _
          "LEFT JOIN lu_EventType AS et ON e.EventType = et.ID) " & _
          "LEFT JOIN tblLocations AS l ON e.LocationID = l.LocationID) " & _
          "LEFT JOIN lu_Team AS ht ON e.Home = ht.ID) " & _
          "LEFT JOIN lu_Team AS vt ON e.Visitor = vt.ID " & _
          "WHERE e.EventID = " & EventID & ";"
          
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If Not rs.EOF Then
        ' Populate the form controls
        Me.txtEventID.value = rs!EventID
        Me.txtEventName.value = Nz(rs!eventName, "")
        Me.cboEventType.value = Nz(rs!EventType, "")
        Me.dtEventDate.value = rs!eventDate
        Me.dtEventTime.value = rs!eventTime
        Me.cboHomeTeam.value = Nz(rs!Home, "")
        Me.cboVisitingTeam.value = Nz(rs!Visitor, "")
        Me.txtTotalScore.value = Nz(rs!TotalScore, "")
        Me.txtOverUnder.value = Nz(rs!OverUnder, "")
        Me.txtCity.value = Nz(rs!City, "")
        Me.txtStateProv.value = Nz(rs!StateProvince, "")
        Me.cboCountry.value = Nz(rs!Country, "")
        Me.txtLatitude.value = Nz(rs!latitude, 0)
        Me.txtLongitude.value = Nz(rs!longitude, 0)
        
        ' Update event chart checkbox if it exists
        On Error Resume Next
        Me.chkEventChartGenerated.value = Nz(rs!EventChartGenerated, False)
        On Error GoTo LoadError
    Else
        MsgBox "Event record not found.", vbExclamation, "Record Not Found"
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Sub

LoadError:
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
    MsgBox "Error loading event data: " & Err.Description, vbCritical, "Load Error"
End Sub


'Private Sub btnViewers_Click()
'    On Error GoTo ErrorHandler
'
'    ' Check if this is a saved event with a valid ID.
'    ' The txtEventID control on your form holds the ID for the current event.
'    If IsNull(Me.txtEventID) Or Me.txtEventID.value = 0 Then
'        MsgBox "You must save the event before you can view assigned viewers.", vbInformation, "Save Required"
'        Exit Sub
'    End If
'
'    ' --- IMPORTANT ---
'    ' Force the form to save any pending edits (like a changed Event Name)
'    ' so the report opens with the most up-to-date information.
'    If Me.Dirty Then
'        Me.Dirty = False
'    End If
'
'    ' Pass the EventID and EventName to the report form via OpenArgs.
'    ' The format is "EventID|EventName".
'    Dim openArgs As String
'    openArgs = Me.txtEventID.value & "|" & Nz(Me.txtEventName.value, "")
'
'    ' Open the report form in Dialog mode.
'    ' Dialog mode pauses code here until the report form is closed.
'    DoCmd.OpenForm "frmAssignedViewerReport", acViewNormal, , , , acDialog, openArgs
'
'    Exit Sub
'
'ErrorHandler:
'    MsgBox "An unexpected error occurred while trying to open the viewers report." & vbCrLf & _
'           "Error: " & Err.Description, vbCritical, "Error"
'End Sub

Private Sub btnViewers_Click()
    On Error GoTo ErrorHandler
    
    ' Get the selected EventID from the list box
    Dim selectedEventID As Long
    selectedEventID = Nz(Me.txtEventID, 0)
    
    If selectedEventID = 0 Then
        MsgBox "Please save the event first before assigning viewers.", vbInformation, "Save Event"
        Exit Sub
    End If
    
    ' Get the Event Name for the selected event
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim eventName As String
    
    Set db = CurrentDb()
    Set rs = db.OpenRecordset("SELECT EventName FROM tblEvents WHERE EventID = " & selectedEventID, dbOpenSnapshot)
    
    If Not rs.EOF Then
        eventName = Nz(rs!eventName, "")
    Else
        eventName = ""
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    
    ' Pass the EventID and EventName to the viewer assignment form via OpenArgs
    ' The format is "EventID|EventName" (same format used in other forms)
    Dim openArgs As String
    openArgs = selectedEventID & "|" & eventName
    
    ' Open the viewer assignment form (frmViewerAssignList) in Dialog mode
    ' This form allows users to assign/unassign viewers and shows current assignments
    DoCmd.OpenForm "frmViewerAssignList", acViewNormal, , , , acDialog, openArgs
        
    Exit Sub

ErrorHandler:
    ' Clean up resources
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
    
    MsgBox "An unexpected error occurred while trying to open the viewer assignment form." & vbCrLf & _
           "Error: " & Err.Description, vbCritical, "Error"
End Sub



' --- NEW SUBROUTINE ---
Private Sub btnViewSessions_Click()
    On Error GoTo ErrorHandler
    
    ' Check for a valid EventID.
    If IsNull(Me.txtEventID.value) Or Me.txtEventID.value = 0 Then
        MsgBox "Cannot view sessions for an unsaved event. Please save this record first.", vbExclamation, "Save Required"
        Exit Sub
    End If
    
    ' Check for unsaved changes before proceeding.
    If HasChanges() Then
        MsgBox "You have unsaved changes. Please save the record before viewing sessions.", vbInformation, "Save Changes"
        Exit Sub
    End If
    
    ' Pass the context to the Session Manager form.
    ' Format: "EventID=28"
    Dim openArgs As String
    openArgs = "EventID=" & Me.txtEventID.value
    
    ' Open the Session Manager form in Dialog mode.
    DoCmd.OpenForm "frmSessionManager", acViewNormal, , , , , openArgs
    
    Exit Sub

ErrorHandler:
    MsgBox "An error occurred opening the Session Manager: " & Err.Description, vbCritical, "Error"
End Sub
' --- END NEW SUBROUTINE ---

Private Sub Form_BeforeUpdate(Cancel As Integer)
    ' Only allow updates if explicitly triggered by Save button
    If Not m_AllowSave Then
        Cancel = True
    End If
End Sub

Private Sub Form_Error(DataErr As Integer, response As Integer)
    ' Handle common form errors gracefully
    Select Case DataErr
        Case 2169 ' You can't save this record at this time
            response = acDataErrContinue
            MsgBox "Unable to save record. Please check your data and try again.", vbExclamation, "Save Error"
        Case Else
            response = acDataErrDisplay
    End Select
End Sub

' === Button Events ===

Private Sub btnSave_Click()
    DoCmd.SetWarnings False
    
    On Error GoTo SaveError
    
    ' Validate required fields
    If Not ValidateForm() Then
        Exit Sub
    End If
    
    ' Check if any changes were made
    If Not HasChanges() Then
        MsgBox "No changes detected. Record was not updated.", vbInformation, "No Changes"
        Exit Sub
    End If
    
    ' Save the data to the database
    SaveEventData
    
    ' Show success message
    MsgBox "Event information has been saved successfully.", vbInformation, "Save Successful"
    
    ' Refresh the original values after successful save
    StoreOriginalValues
    
    DoCmd.SetWarnings True
    Exit Sub

SaveError:
    DoCmd.SetWarnings True
    MsgBox "Error saving event information: " & Err.Description, vbCritical, "Save Error"
End Sub

Private Sub SaveEventData()
    ' Save data from unbound controls to database
    On Error GoTo SaveDataError
    
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    Dim LocationID As Long
    
    Set db = CurrentDb()
    
    ' First, handle the location
    LocationID = GetOrCreateLocationID()
    
    
    ' Update the event record
    sql = "SELECT * FROM tblEvents WHERE EventID = " & Me.txtEventID.value
    Set rs = db.OpenRecordset(sql, dbOpenDynaset)
    
    
    If Not rs.EOF Then
        rs.Edit
        
        rs!eventName = Me.txtEventName.value
        rs!EventType = Me.cboEventType.value
        rs!eventDate = Me.dtEventDate.value
        rs!eventTime = Me.dtEventTime.value
        rs!Home = Nz(Me.cboHomeTeam.value, "")
        rs!Visitor = Nz(Me.cboVisitingTeam.value, "")
        rs!TotalScore = Me.txtTotalScore.value
        rs!OverUnder = Me.txtOverUnder.value
        rs!LocationID = LocationID
        rs!DateUpdated = Now()
        
        rs.Update
    End If
        
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Sub

SaveDataError:
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
    Err.Raise Err.Number, Err.Source, Err.Description
End Sub

Private Function GetOrCreateLocationID() As Long
    ' Get existing location ID or create new location record
    On Error GoTo LocationIDError
    
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    Dim newLocationID As Long
    
    Set db = CurrentDb()
    
    ' Check if location already exists
    sql = "SELECT LocationID FROM tblLocations WHERE " & _
          "City = '" & Replace(Me.txtCity.value, "'", "''") & "' AND " & _
          "Country = '" & Replace(Me.cboCountry.value, "'", "''") & "'"
    
    If Not IsNull(Me.txtStateProv.value) And Len(Trim(Me.txtStateProv.value)) > 0 Then
        sql = sql & " AND [StateProvince] = '" & Replace(Me.txtStateProv.value, "'", "''") & "'"
    Else
        sql = sql & " AND ([StateProvince] IS NULL OR [StateProvince] = '')"
    End If
    
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    ' --- PROACTIVE FIX for Quirk #9 ---
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
    End If
    ' --- END FIX ---
    
    If rs.recordCount > 0 Then
        ' Location exists, return the ID
        GetOrCreateLocationID = rs!LocationID
    Else
        ' Create new location using dynaset recordset
        rs.Close
        Set rs = db.OpenRecordset("tblLocations", dbOpenDynaset)
        rs.AddNew
        rs!City = ProperCase(Me.txtCity.value)
        rs![StateProvince] = UCase(Me.txtStateProv.value)
        rs!Country = Me.cboCountry.value
        rs!latitude = Me.txtLatitude.value
        rs!longitude = Me.txtLongitude.value
        rs!DateCreated = Now()
        rs!DateUpdated = Now()
        rs.Update
        
        ' IMPORTANT: Move to the record we just created to get the ID
        rs.Bookmark = rs.LastModified
        newLocationID = rs!LocationID
        GetOrCreateLocationID = newLocationID
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
LocationIDError:
    If Not rs Is Nothing Then
        On Error Resume Next
        rs.Close
        Set rs = Nothing
        On Error GoTo 0
    End If
    Set db = Nothing
    Err.Raise Err.Number, Err.Source, "Error managing location: " & Err.Description
End Function

Private Sub btnCancel_Click()
    On Error GoTo CancelError
    
    ' Check if there are unsaved changes
    If HasChanges() Then
        Dim response As VbMsgBoxResult
        response = MsgBox("You have unsaved changes. Are you sure you want to cancel?" & vbCrLf & _
                          "All changes will be lost.", vbQuestion + vbYesNo, "Confirm Cancel")
        
        If response = vbNo Then
            Exit Sub
        End If
    End If
    
    ' Revert any unsaved changes
    If Me.Dirty Then
        Me.Undo
    End If
    
    ' Show confirmation message
    MsgBox "Changes have been cancelled. No updates were saved to the database.", _
           vbInformation, "Changes Cancelled"
    
    ' Close the form
    DoCmd.Close acForm, Me.name, acSaveNo
    Exit Sub

CancelError:
    MsgBox "Error cancelling changes: " & Err.Description, vbCritical, "Cancel Error"
End Sub

Private Sub btnClose_Click()

    On Error GoTo CloseError

    ' Check if there are unsaved changes
    If HasChanges() And Me.Dirty Then
        Dim response As VbMsgBoxResult
        response = MsgBox("You have unsaved changes. Do you want to save them before closing?", _
                          vbQuestion + vbYesNoCancel, "Unsaved Changes")

        Select Case response
            Case vbYes
                ' Save changes
                Call btnSave_Click
                If HasChanges() Then  ' If save failed, don't close
                    Exit Sub
                End If
            Case vbNo
                ' Don't save, just close
                If Me.Dirty Then
                    Me.Undo
                End If
                MsgBox "Changes were not saved.", vbInformation, "Not Saved"
            Case vbCancel
                ' Don't close
                Exit Sub
        End Select
    End If

    ' Close the form
    DoCmd.Close acForm, Me.name, acSaveNo
    Exit Sub

CloseError:
    MsgBox "Error closing form: " & Err.Description, vbCritical, "Close Error"
End Sub

' === Utility Functions ===

Private Sub StoreOriginalValues()
    ' Store original values for comparison
    Set m_OriginalValues = New Collection
    
    On Error Resume Next
    
    ' Store the current values of all bound controls
    m_OriginalValues.Add Me.txtEventID.value, "EventID"
    m_OriginalValues.Add Me.txtEventName.value, "EventName"
    m_OriginalValues.Add Me.cboEventType.value, "EventType"
    m_OriginalValues.Add Me.dtEventDate.value, "EventDate"
    m_OriginalValues.Add Me.dtEventTime.value, "EventTime"
    m_OriginalValues.Add Me.cboHomeTeam.value, "Home"
    m_OriginalValues.Add Me.cboVisitingTeam.value, "Visitor"
    m_OriginalValues.Add Me.txtTotalScore.value, "TotalScore"
    m_OriginalValues.Add Me.txtOverUnder.value, "OverUnder"
    m_OriginalValues.Add Me.txtCity.value, "City"
    m_OriginalValues.Add Me.txtStateProv.value, "StateProvince"
    m_OriginalValues.Add Me.cboCountry.value, "Country"
    m_OriginalValues.Add Me.txtLatitude.value, "Latitude"
    m_OriginalValues.Add Me.txtLongitude.value, "Longitude"
    
    On Error GoTo 0
End Sub

Private Function HasChanges() As Boolean
    ' Compare current values with original values
    On Error Resume Next
    
    HasChanges = False
    
    ' Check each field for changes
    
    If Nz(Me.txtEventName.value, "") <> Nz(m_OriginalValues("EventName"), "") Then HasChanges = True
    If Nz(Me.cboEventType.value, "") <> Nz(m_OriginalValues("EventType"), "") Then HasChanges = True
    If Nz(Me.dtEventDate.value, #1/1/1900#) <> Nz(m_OriginalValues("EventDate"), #1/1/1900#) Then HasChanges = True
    If Nz(Me.dtEventTime.value, #12:00:00 AM#) <> Nz(m_OriginalValues("EventTime"), #12:00:00 AM#) Then HasChanges = True
    If Nz(Me.cboHomeTeam.value, "") <> Nz(m_OriginalValues("Home"), "") Then HasChanges = True
    If Nz(Me.cboVisitingTeam.value, "") <> Nz(m_OriginalValues("Visitor"), "") Then HasChanges = True
    If Nz(Me.txtTotalScore.value, "") <> Nz(m_OriginalValues("TotalScore"), "") Then HasChanges = True
    If Nz(Me.txtOverUnder.value, "") <> Nz(m_OriginalValues("OverUnder"), "") Then HasChanges = True
    If Nz(Me.txtCity.value, "") <> Nz(m_OriginalValues("City"), "") Then HasChanges = True
    If Nz(Me.txtStateProv.value, "") <> Nz(m_OriginalValues("StateProvince"), "") Then HasChanges = True
    If Nz(Me.cboCountry.value, "") <> Nz(m_OriginalValues("Country"), "") Then HasChanges = True
    If Nz(Me.txtLatitude.value, "") <> Nz(m_OriginalValues("Latitude"), 0) Then HasChanges = True
    If Nz(Me.txtLongitude.value, "") <> Nz(m_OriginalValues("Longitude"), 0) Then HasChanges = True
    
    On Error GoTo 0
End Function

Private Function ValidateForm() As Boolean
    ' Validate required fields
    ValidateForm = True
    
    ' Check required fields

    ' Event Name - Optional prior to 5/31/2025
    If (IsNull(Me.txtEventName) Or Me.txtEventName = "") And _
       (Not IsNull(Me.dtEventDate) And Me.dtEventDate > DateSerial(2025, 5, 31)) Then
        MsgBox "Please enter an Event Name.", vbExclamation, "Required Field"
        Me.txtEventName.SetFocus
        ValidateForm = False
        Exit Function
    End If
    
    If Len(Trim(Nz(cboEventType.value, ""))) = 0 Then
        MsgBox "Event Type is required.", vbExclamation, "Validation Error"
        Me.cboEventType.SetFocus
        ValidateForm = False
        Exit Function
    End If
    
    If IsNull(Me.dtEventDate.value) Then
        MsgBox "Event Date is required.", vbExclamation, "Validation Error"
        Me.dtEventDate.SetFocus
        ValidateForm = False
        Exit Function
    End If
    
    If IsNull(Me.dtEventTime.value) Then
        MsgBox "Event Time is required.", vbExclamation, "Validation Error"
        Me.dtEventTime.SetFocus
        ValidateForm = False
        Exit Function
    End If
        
    ' Validate Home Team field
    Select Case Me.cboEventType.value
        Case 3, 9, 10, 11, 12, 13
            ' Do nothing - these are NOT sports events
        Case Else
            ' Check Team values are specified for Sport events
            If Len(Trim(Nz(Me.cboHomeTeam.value, ""))) = 0 Then
                MsgBox "Home Team is required.", vbExclamation, "Validation Error"
                Me.cboHomeTeam.SetFocus
                ValidateForm = False
                Exit Function
            End If
    End Select
    
    ' Validate Visiting Team field
    Select Case Me.cboEventType.value
        Case 3, 9, 10, 11, 12, 13
            ' Do nothing - these are NOT sports events
        Case Else
            ' Check Team values are specified for Sport events
            If Len(Trim(Nz(Me.cboVisitingTeam.value, ""))) = 0 Then
                MsgBox "Visitor Team is required.", vbExclamation, "Validation Error"
                Me.cboVisitingTeam.SetFocus
                ValidateForm = False
                Exit Function
            End If
    End Select
    
    ' Validate location fields
    If Len(Trim(Nz(Me.txtCity.value, ""))) = 0 Then
        MsgBox "City is required.", vbExclamation, "Validation Error"
        Me.txtCity.SetFocus
        ValidateForm = False
        Exit Function
    End If
    
    ' Validate location fields
    Select Case Me.cboCountry
        Case "USA", "Canada"
        If Len(Trim(Nz(Me.txtStateProv.value, ""))) = 0 Then
            MsgBox "State/Province is required.", vbExclamation, "Validation Error"
            Me.txtStateProv.SetFocus
            ValidateForm = False
            Exit Function
        End If
    End Select
    
    If Len(Trim(Nz(Me.cboCountry.value, ""))) = 0 Then
        MsgBox "Country is required.", vbExclamation, "Validation Error"
        Me.cboCountry.SetFocus
        ValidateForm = False
        Exit Function
    End If
    
    ' Validate coordinates if present
    If Not IsNull(Me.txtLatitude.value) Then
        If Me.txtLatitude.value < -90 Or Me.txtLatitude.value > 90 Then
            MsgBox "Latitude must be between -90 and 90 degrees.", vbExclamation, "Validation Error"
            Me.txtLatitude.SetFocus
            ValidateForm = False
            Exit Function
        End If
    End If
    
    If Not IsNull(Me.txtLongitude.value) Then
        If Me.txtLongitude.value < -180 Or Me.txtLongitude.value > 180 Then
            MsgBox "Longitude must be between -180 and 180 degrees.", vbExclamation, "Validation Error"
            Me.txtLongitude.SetFocus
            ValidateForm = False
            Exit Function
        End If
    End If
End Function

Private Sub UpdateDateUpdated()
    ' Update the DateUpdated field if it exists
    On Error Resume Next
    
    Dim db As DAO.Database
    Dim sql As String
    
    Set db = CurrentDb()
    
    ' Update the DateUpdated field in tblPeople
    sql = "UPDATE tblEvents SET DateUpdated = Now() WHERE EventID = " & Me.txtEventID.value
    db.Execute sql
    
    Set db = Nothing
    On Error GoTo 0
End Sub

' === Control Events for Change Tracking ===

Private Sub EventName_AfterUpdate()
    MarkFormDirty
End Sub

Private Sub EventType_AfterUpdate()
    MarkFormDirty
End Sub

Private Sub EventDate_AfterUpdate()
    MarkFormDirty
End Sub

Private Sub EventTime_AfterUpdate()
    MarkFormDirty
End Sub

Private Sub TotalScore_AfterUpdate()
    MarkFormDirty
End Sub

Private Sub OverUnder_AfterUpdate()
    MarkFormDirty
End Sub

Private Sub City_AfterUpdate()
    MarkFormDirty
End Sub

Private Sub StateProv_AfterUpdate()
    MarkFormDirty
End Sub

Private Sub Country_AfterUpdate()
    MarkFormDirty
End Sub

Private Sub Latitude_AfterUpdate()
    MarkFormDirty
End Sub

Private Sub Longitude_AfterUpdate()
    MarkFormDirty
End Sub

Private Sub MarkFormDirty()
    ' Ensure the form knows it has been modified
    If Not m_FormLoading Then
        Me.Dirty = True
    End If
End Sub

' === Location and Event Chart Integration ===

Private Sub UpdateLocationInfo()
    ' This function can be called after coordinates are retrieved
    ' to update the location in tblLocations and link to the person
    
    On Error GoTo LocationError
    
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim LocationID As Long
    Dim sql As String
    
    Set db = CurrentDb()
    
    ' Check if location already exists
    sql = "SELECT LocationID FROM tblLocations WHERE " & _
          "City = '" & Replace(Me.txtCity.value, "'", "''") & "' AND " & _
          "Country = '" & Replace(Me.cboCountry.value, "'", "''") & "'"
    
    If Not IsNull(Me.txtStateProv.value) And Len(Trim(Me.txtStateProv.value)) > 0 Then
        sql = sql & " AND [StateProvince] = '" & Replace(Me.txtStateProv.value, "'", "''") & "'"
    End If
    
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    ' --- PROACTIVE FIX for Quirk #9 ---
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
    End If
    ' --- END FIX ---
    
    If rs.recordCount > 0 Then
        ' Location exists, get the ID
        LocationID = rs!LocationID
    Else
        ' Create new location
        rs.Close
        Set rs = db.OpenRecordset("tblLocations", dbOpenDynaset)
        rs.AddNew
        rs!City = ProperCase(Me.txtCity.value)
        rs![StateProvince] = UCase(Me.txtStateProv.value)
        rs!Country = Me.cboCountry.value
        rs!latitude = Me.txtLatitude.value
        rs!longitude = Me.txtLongitude.value
        rs!DateCreated = Now()
        rs.Update
        ' Get the new ID after updating
        rs.Bookmark = rs.LastModified
        LocationID = rs!LocationID
    End If
    
    ' Update the event's location
    rs.Close
    sql = "UPDATE tblEvents SET LocationID = " & LocationID & " WHERE EventID = " & Me.txtEventID.value
    db.Execute sql
    
    Set rs = Nothing
    Set db = Nothing
    Exit Sub

LocationError:
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
    MsgBox "Error updating location information: " & Err.Description, vbCritical, "Location Error"
End Sub

'Private Sub btnGenerateEventChart_Click()
'    ' Generate natal chart for this event
'    On Error GoTo ChartError
'
'    ' First ensure all data is saved
'    If Me.Dirty Then
'        Call btnSave_Click
'        If Me.Dirty Then  ' If save failed, don't proceed
'            Exit Sub
'        End If
'    End If
'
'    ' Validate required data for chart generation
'    If IsNull(Me.dtEventDate.value) Or IsNull(Me.dtEventTime.value) Then
'        MsgBox "Event Date and Event Time are required for event chart generation.", vbExclamation, "Missing Data"
'        Exit Sub
'    End If
'
'    If IsNull(Me.txtLatitude.value) Or IsNull(Me.txtLongitude.value) Then
'        MsgBox "Location coordinates are required for event chart generation." & vbCrLf & _
'               "Please use the 'Get Coordinates' button first.", vbExclamation, "Missing Coordinates"
'        Exit Sub
'    End If
'
'    ' Update location information
'    UpdateLocationInfo
'
'    ' Here you would call your natal chart generation function
'    ' This should integrate with your Swiss Ephemeris code
'
'    ' For now, just show a placeholder message
'    MsgBox "Event chart generation would be triggered here." & vbCrLf & _
'           "This will integrate with your Swiss Ephemeris calculations.", vbInformation, "Chart Generation"
'
'    ' Mark Event chart as generated
'    Dim db As DAO.Database
'    Dim sql As String
'
'    Set db = CurrentDb()
'    sql = "UPDATE tblEvents SET EventChartGenerated = True WHERE EventID = " & Me.txtEventID.value
'    db.Execute sql
'    Set db = Nothing
'
'    ' Refresh the form to show the updated status
'    Me.Requery
'
'    Exit Sub
'
'ChartError:
'    MsgBox "Error generating event chart: " & Err.Description, vbCritical, "Chart Generation Error"
'End Sub

Private Sub btnGenerateEventChart_Click()
    On Error GoTo ErrorHandler
    
    Dim mEventID As Long
    mEventID = Me.txtEventID
    
    ' First ensure all data is saved
    If HasChanges() Then
        MsgBox "Please save any changes before generating the natal chart.", vbInformation, "Save Required"
        Exit Sub
    End If
    

    ' Validate required data for chart generation
    If IsNull(Me.dtEventDate.value) Or IsNull(Me.dtEventTime.value) Then
        MsgBox "Event Date and Event Time are required for event chart generation.", vbExclamation, "Missing Data"
        Exit Sub
    End If

    If IsNull(Me.txtLatitude.value) Or IsNull(Me.txtLongitude.value) Then
        MsgBox "Location coordinates are required for event chart generation." & vbCrLf & _
               "Please use the 'Get Coordinates' button first.", vbExclamation, "Missing Coordinates"
        Exit Sub
    End If
    
    ' Validate that we have a EventID
    If mEventID = 0 Then
        MsgBox "Cannot generate event chart for an unsaved Event.", vbExclamation, "Save Required"
        Exit Sub
    End If
    
    ' Show confirmation for regeneration
    Dim chartExists As Boolean
    chartExists = GetChartStatus(mEventID)
    
    If chartExists Then
        If MsgBox("A event chart already exists for this Event. Do you want to regenerate it?", _
                  vbQuestion + vbYesNo, "Regenerate Chart") = vbNo Then
            Exit Sub
        End If
    End If
    
    ' Change cursor to hourglass
    DoCmd.Hourglass True
    
    ' Call the WORKING function from modSimpleChart
    Dim Success As Boolean
    Success = modSimpleChart.GenerateEventChart(mEventID)
    
    ' Turn off hourglass
    DoCmd.Hourglass False
    
    If Success Then
        ' Update the controls to reflect the new chart status
        UpdateChartControls
        MsgBox "Event chart generated successfully!", vbInformation, "Chart Generated"
    Else
        MsgBox "Failed to generate event chart. Please check the error messages.", vbExclamation, "Generation Failed"
    End If
    
    Exit Sub
    
ErrorHandler:
    DoCmd.Hourglass False
    MsgBox "Error generating event chart: " & Err.Description, vbCritical, "Chart Generation Error"
End Sub
'    ' Mark Event chart as generated
'    Dim db As DAO.Database
'    Dim sql As String
'
'    Set db = CurrentDb()
'    sql = "UPDATE tblEvents SET EventChartGenerated = True WHERE EventID = " & Me.txtEventID.value
'    db.Execute sql
'    Set db = Nothing
'
'    ' Refresh the form to show the updated status
'    Me.Requery
'
'    Exit Sub
'
'ChartError:
'    MsgBox "Error generating event chart: " & Err.Description, vbCritical, "Chart Generation Error"
'End Sub








Private Sub btnGetCoordinates_Click()
    Dim strCity As String
    Dim strState As String
    Dim strCountry As String
    Dim strAddress As String
    Dim strResult As String
    Dim dblLat As Double
    Dim dblLng As Double
    
    ' Get values from form controls
    strCity = ProperCase(Nz(Me.txtCity, ""))
    strState = UCase(Nz(Me.txtStateProv, ""))
    strCountry = Nz(Me.cboCountry, "")
    
    ' Basic validation - ensure required fields are filled
    If Trim(strCity) = "" Or Trim(strCountry) = "" Then
        MsgBox "City and Country are required fields to get coordinates.", vbExclamation, "Missing Information"
        Exit Sub
    End If
    
    ' Special case: USA requires state
    If UCase(Trim(strCountry)) = "USA" And Trim(strState) = "" Then
        MsgBox "State is required for locations in the USA.", vbExclamation, "Missing Information"
        Exit Sub
    End If
    
    ' Format the address for the API
    If Trim(strState) = "" Then
        strAddress = Trim(strCity) & ", " & Trim(strCountry)
    Else
        strAddress = Trim(strCity) & ", " & Trim(strState) & ", " & Trim(strCountry)
    End If
    
    ' Show hourglass cursor
    DoCmd.Hourglass True
    
    ' Call the API function to get coordinates
    strResult = GetLatLong_LocationIQ(strAddress)
    
    ' Process the result
    If Left(strResult, 5) = "Lat: " Then
        ' Parse the latitude and longitude from the result
        dblLat = val(Mid(strResult, 6, InStr(strResult, ", Lng:") - 6))
        dblLng = val(Mid(strResult, InStr(strResult, ", Lng:") + 7))
        
        ' Update the form fields
        Me.txtLatitude = dblLat
        Me.txtLongitude = dblLng
        
        MsgBox "Coordinates retrieved successfully!", vbInformation, "Success"
    Else
        ' Show error message
        MsgBox "Error retrieving coordinates: " & strResult, vbExclamation, "API Error"
    End If
    
    ' Turn off hourglass cursor
    DoCmd.Hourglass False
End Sub

' CHART MANAGEMENT
Private Sub UpdateChartControls()
    Dim chartExists As Boolean
    
    Dim mEventID As Long
    mEventID = Me.txtEventID
    
    ' Check if we have a valid EventID and if chart exists
    If mEventID > 0 Then
        chartExists = GetChartStatus(mEventID)
    Else
        chartExists = False
    End If
    
    ' Update checkbox state
    Me.chkEventChartGenerated.value = chartExists
    
    ' Update button states
    Me.btnGenerateEventChart.Enabled = (mEventID > 0)
    Me.btnViewChart.Enabled = chartExists And (mEventID > 0)
    
    ' Update button caption based on chart existence
    If chartExists Then
        Me.btnGenerateEventChart.Caption = "Regenerate Event Chart"
    Else
        Me.btnGenerateEventChart.Caption = "Generate Event Chart"
    End If
End Sub


