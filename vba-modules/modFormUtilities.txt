Attribute VB_Name = "modFormUtilities"
Option Compare Database
Option Explicit

' Shared utilities for forms - location management, validation, etc.

' Function to get or create a location record (shared between Student and Session forms)
Public Function GetOrCreateLocation(City As String, state As String, Country As String, lat As Double, lng As Double) As Long
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    
    ' First, try to find existing location with same coordinates (within small tolerance)
    sql = "SELECT LocationID FROM tblLocations WHERE " & _
          "City = '" & Replace(City, "'", "''") & "' AND " & _
          "Country = '" & Replace(Country, "'", "''") & "' AND " & _
          "ABS(Latitude - " & lat & ") < 0.01 AND " & _
          "ABS(Longitude - " & lng & ") < 0.01"
    
    If state <> "" Then
        sql = sql & " AND [State/Province] = '" & Replace(state, "'", "''") & "'"
    Else
        sql = sql & " AND ([State/Province] IS NULL OR [State/Province] = '')"
    End If
    
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If Not rs.EOF Then
        ' Location already exists
        GetOrCreateLocation = rs!LocationID
    Else
        ' Create new location
        rs.Close
        Set rs = db.OpenRecordset("tblLocations", dbOpenDynaset)
        rs.AddNew
        With rs
            !City = City
            If state <> "" Then ![State/Province] = state
            !Country = Country
            !latitude = lat
            !longitude = lng
            !DateCreated = Now()
            !DateUpdated = Now()
        End With
        rs.Update
        GetOrCreateLocation = rs!LocationID
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    GetOrCreateLocation = 0
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

' Function to validate location data before saving
Public Function ValidateLocationData(City As String, Country As String, lat As Double, lng As Double) As Boolean
    ValidateLocationData = False
    
    If Trim(City) = "" Then
        MsgBox "City is required", vbExclamation
        Exit Function
    End If
    
    If Trim(Country) = "" Then
        MsgBox "Country is required", vbExclamation
        Exit Function
    End If
    
    If lat = 0 And lng = 0 Then
        MsgBox "Please get coordinates before saving", vbExclamation
        Exit Function
    End If
    
    If lat < -90 Or lat > 90 Then
        MsgBox "Invalid latitude. Must be between -90 and 90 degrees", vbExclamation
        Exit Function
    End If
    
    If lng < -180 Or lng > 180 Then
        MsgBox "Invalid longitude. Must be between -180 and 180 degrees", vbExclamation
        Exit Function
    End If
    
    ValidateLocationData = True
End Function

' Function to format coordinates for display
Public Function FormatCoordinates(lat As Double, lng As Double) As String
    Dim latDir As String, lngDir As String
    
    latDir = IIf(lat >= 0, "N", "S")
    lngDir = IIf(lng >= 0, "E", "W")
    
    FormatCoordinates = Format(Abs(lat), "0.000000") & "° " & latDir & ", " & _
                      Format(Abs(lng), "0.000000") & "° " & lngDir
End Function

' Function to populate country combo box
Public Sub PopulateCountryCombo(cbo As ComboBox)
    Dim countries As String
    
    ' Common countries list - you can expand this or load from a table
    countries = "USA;Canada;United Kingdom;Australia;Germany;France;Italy;Spain;Japan;China;India;Brazil;Mexico;Netherlands;Belgium;Switzerland;Austria;Sweden;Norway;Denmark;Finland;Ireland;New Zealand;South Africa;Argentina;Chile;Peru;Colombia;Venezuela;Russia;Poland;Czech Republic;Hungary;Greece;Turkey;Israel;Egypt;Morocco;Nigeria;Kenya;Thailand;Philippines;Indonesia;Malaysia;Singapore;South Korea;Taiwan;Hong Kong;Iceland;Portugal;Luxembourg"
    
    cbo.RowSource = Replace(countries, ";", ";")
    cbo.RowSourceType = "Value List"
End Sub

' Function to get student name for display
Public Function GetStudentName(studentID As Long) As String
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    
    On Error GoTo ErrorHandler
    
    If studentID = 0 Then
        GetStudentName = ""
        Exit Function
    End If
    
    Set db = CurrentDb()
    sql = "SELECT FirstName, LastName FROM tblPeople WHERE PersonID = " & studentID
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If Not rs.EOF Then
        GetStudentName = Trim(Nz(rs!FirstName, "")) & " " & Trim(Nz(rs!LastName, ""))
    Else
        GetStudentName = "Unknown Student"
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    GetStudentName = "Error"
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

' Function to get event name for display
Public Function GetEventName(eventID As Long) As String
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    
    On Error GoTo ErrorHandler
    
    If eventID = 0 Then
        GetEventName = ""
        Exit Function
    End If
    
    Set db = CurrentDb()
    sql = "SELECT EventName, EventDate FROM tblEvents WHERE EventID = " & eventID
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If Not rs.EOF Then
        GetEventName = Trim(Nz(rs!eventName, "")) & " (" & Format(rs!eventDate, "mm/dd/yyyy") & ")"
    Else
        GetEventName = "Unknown Event"
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    GetEventName = "Error"
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

' Function to check if a person has a natal chart
Public Function PersonHasNatalChart(PersonID As Long) As Boolean
    PersonHasNatalChart = (modChartCalculation.GetChartID("Natal", PersonID) > 0)
End Function

' Function to check if an event has a chart
Public Function EventHasChart(eventID As Long) As Boolean
    EventHasChart = (modChartCalculation.GetChartID("Event", , eventID) > 0)
End Function

' Function to check if a session has a chart
Public Function SessionHasChart(SessionID As Long) As Boolean
    SessionHasChart = (modChartCalculation.GetChartID("Session", , , SessionID) > 0)
End Function

' Function to get impression count for a session
Public Function GetImpressionCount(SessionID As Long) As Long
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    sql = "SELECT COUNT(*) AS ImpressionCount FROM tblImpressions WHERE SessionID = " & SessionID
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If Not rs.EOF Then
        GetImpressionCount = Nz(rs!ImpressionCount, 0)
    Else
        GetImpressionCount = 0
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    GetImpressionCount = 0
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

' Function to validate date/time fields
Public Function ValidateDateTime(fieldName As String, dateValue As Variant, timeValue As Variant, Optional allowFuture As Boolean = False) As Boolean
    ValidateDateTime = False
    
    If IsNull(dateValue) Or dateValue = 0 Then
        MsgBox fieldName & " date is required", vbExclamation
        Exit Function
    End If
    
    If IsNull(timeValue) Or timeValue = 0 Then
        MsgBox fieldName & " time is required", vbExclamation
        Exit Function
    End If
    
    ' Check if date is too far in the past (before 1800)
    If Year(dateValue) < 1800 Then
        MsgBox fieldName & " date cannot be before year 1800", vbExclamation
        Exit Function
    End If
    
    ' Check if date is in the future (unless allowed)
    If Not allowFuture And dateValue > Date Then
        MsgBox fieldName & " date cannot be in the future", vbExclamation
        Exit Function
    End If
    
    ValidateDateTime = True
End Function

' Function to format time for display
Public Function FormatTimeDisplay(timeValue As Variant) As String
    If IsNull(timeValue) Then
        FormatTimeDisplay = ""
    Else
        FormatTimeDisplay = Format(timeValue, "h:nn AM/PM")
    End If
End Function

' Function to calculate elapsed time between two times
Public Function CalculateElapsedTime(startTime As Variant, endTime As Variant) As String
    If IsNull(startTime) Or IsNull(endTime) Then
        CalculateElapsedTime = ""
        Exit Function
    End If
    
    Dim elapsed As Double
    elapsed = endTime - startTime
    
    If elapsed < 0 Then
        elapsed = elapsed + 1 ' Handle crossing midnight
    End If
    
    Dim hours As Long, minutes As Long
    hours = Int(elapsed * 24)
    minutes = Int((elapsed * 24 - hours) * 60)
    
    If hours > 0 Then
        CalculateElapsedTime = hours & " hour" & IIf(hours > 1, "s", "") & " " & minutes & " minute" & IIf(minutes <> 1, "s", "")
    Else
        CalculateElapsedTime = minutes & " minute" & IIf(minutes <> 1, "s", "")
    End If
End Function

