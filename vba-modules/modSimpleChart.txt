Attribute VB_Name = "modSimpleChart"
Option Compare Database
Option Explicit

' Simple natal chart calculation for testing
' Call this function with a PersonID to generate their natal chart

Public Function GenerateNatalChart(PersonID As Long) As Boolean
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    Dim chartID As Long
    
    ' Person data
    Dim BirthDate As Date
    Dim BirthTime As Date
    Dim LocationID As Long
    Dim latitude As Double
    Dim longitude As Double
    
    ' Calculation data
    Dim julianDay As Double
    Dim combinedDateTime As Date
    
    On Error GoTo ErrorHandler
    
    Debug.Print "Starting natal chart generation for PersonID: " & PersonID
    
    Set db = CurrentDb()
    
    ' Get person's birth data
    sql = "SELECT p.BirthDate, p.BirthTime, p.LocationID, l.Latitude, l.Longitude " & _
          "FROM tblPeople p INNER JOIN tblLocations l ON p.LocationID = l.LocationID " & _
          "WHERE p.PersonID = " & PersonID
    
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If rs.EOF Then
        Debug.Print "Error: Person not found with ID " & PersonID
        GenerateNatalChart = False
        Exit Function
    End If
    
    ' Extract birth data
    BirthDate = rs!BirthDate
    BirthTime = rs!BirthTime
    LocationID = rs!LocationID
    latitude = rs!latitude
    longitude = rs!longitude
    
    rs.Close
    
    Debug.Print "Birth Date: " & BirthDate
    Debug.Print "Birth Time: " & BirthTime
    Debug.Print "Location: " & latitude & ", " & longitude
    
    ' Check if natal chart already exists
    chartID = GetExistingNatalChart(PersonID)
    If chartID > 0 Then
        Debug.Print "Natal chart already exists with ChartID: " & chartID
        Debug.Print "Deleting existing chart..."
        If Not DeleteExistingChart(chartID) Then
            Debug.Print "Error: Failed to delete existing chart"
            GenerateNatalChart = False
            Exit Function
        End If
    End If
    
    ' Initialize Swiss Ephemeris
    If Not modSwissItems.InitSwissEph() Then
        Debug.Print "Error: Failed to initialize Swiss Ephemeris"
        GenerateNatalChart = False
        Exit Function
    End If
    
    ' Calculate Julian Day
    combinedDateTime = BirthDate + timeValue(Format(BirthTime, "hh:nn:ss"))
    julianDay = modUtilities.DateToJulianDay(combinedDateTime)
    
    Debug.Print "Julian Day: " & julianDay
    
    ' Create chart record
    chartID = CreateChartRecord(PersonID, "Natal", BirthDate, BirthTime, LocationID)
    If chartID = 0 Then
        Debug.Print "Error: Failed to create chart record"
        GenerateNatalChart = False
        Exit Function
    End If
    
    Debug.Print "Created chart record with ChartID: " & chartID
    
    ' Calculate and save planetary positions
    If Not CalculateAndSavePlanets(chartID, julianDay, latitude, longitude) Then
        Debug.Print "Error: Failed to calculate planetary positions"
        GenerateNatalChart = False
        Exit Function
    End If
    
    ' Calculate and save house angles
    If Not CalculateAndSaveAngles(chartID, julianDay, latitude, longitude) Then
        Debug.Print "Error: Failed to calculate house angles"
        GenerateNatalChart = False
        Exit Function
    End If
    
    ' Calculate and save aspects between planets
    If Not CalculateAndSaveAspects(chartID) Then
        Debug.Print "Error: Failed to calculate aspects"
        GenerateNatalChart = False
        Exit Function
    End If
    
    ' Update person record to mark natal chart as generated
    db.Execute "UPDATE tblPeople SET NatalChartGenerated = True, DateUpdated = Now() WHERE PersonID = " & PersonID

   
    ' Update person record to mark natal chart as generated
    db.Execute "UPDATE tblPeople SET NatalChartGenerated = True, DateUpdated = Now() WHERE PersonID = " & PersonID
    
    Debug.Print "Natal chart generation completed successfully!"
    GenerateNatalChart = True
    
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in GenerateNatalChart: " & Err.Number & " - " & Err.Description
    GenerateNatalChart = False
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

Private Function GetExistingNatalChart(PersonID As Long) As Long
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    sql = "SELECT ChartID FROM tblCharts WHERE PersonID = " & PersonID & " AND ChartType = 'Natal'"
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If Not rs.EOF Then
        GetExistingNatalChart = rs!chartID
    Else
        GetExistingNatalChart = 0
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    GetExistingNatalChart = 0
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

' Replace your existing DeleteExistingChart function in modSimpleChart with this updated version:

Private Function DeleteExistingChart(chartID As Long) As Boolean
    Dim db As DAO.Database
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    
    ' Delete in correct order due to foreign key constraints
    ' Delete aspects first (they reference ChartID)
    db.Execute "DELETE FROM tblChartAspects WHERE ChartID = " & chartID
    Debug.Print "Deleted existing aspects for ChartID: " & chartID
    
    ' Delete positions next (they reference ChartID)
    db.Execute "DELETE FROM tblChartPositions WHERE ChartID = " & chartID
    Debug.Print "Deleted existing positions for ChartID: " & chartID
    
    ' Delete chart record last
    db.Execute "DELETE FROM tblCharts WHERE ChartID = " & chartID
    Debug.Print "Deleted existing chart record: " & chartID
    
    DeleteExistingChart = True
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    Debug.Print "Error deleting chart: " & Err.Description
    DeleteExistingChart = False
    Set db = Nothing
End Function

Private Function CreateChartRecord(PersonID As Long, chartType As String, ChartDate As Date, ChartTime As Date, LocationID As Long) As Long
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    Set rs = db.OpenRecordset("tblCharts", dbOpenDynaset)
    
    rs.AddNew
    With rs
        !PersonID = PersonID
        ' Check if EventID and SessionID fields exist and are required
        On Error Resume Next
        !EventID = Null
        !SessionID = Null
        On Error GoTo ErrorHandler
        !chartType = chartType
        !ChartDate = ChartDate
        !ChartTime = ChartTime
        !LocationID = LocationID
        !DateCreated = Now()
        !Notes = "Generated by modSimpleChart"
    End With
    rs.Update
    
    ' Get the ChartID that was just created
    rs.Bookmark = rs.LastModified
    CreateChartRecord = rs!chartID
    
    Debug.Print "Chart record created with ChartID: " & CreateChartRecord
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    Debug.Print "Error creating chart record: " & Err.Number & " - " & Err.Description
    CreateChartRecord = 0
    If Not rs Is Nothing Then
        On Error Resume Next
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function


Private Function CalculateAndSaveAngles(chartID As Long, julianDay As Double, lat As Double, lng As Double) As Boolean
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim houseResult As Variant
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    Set rs = db.OpenRecordset("tblChartPositions", dbOpenDynaset)
    
    Debug.Print "Calculating house angles..."
    
    ' Get Ascendant and Midheaven using existing function
    houseResult = modSwissItems.GetAscendantMidheaven(julianDay, lat, lng)
    
    If IsArray(houseResult) And houseResult(0) <> -999 Then
        Dim ascendant As Double, midheaven As Double
        Dim descendant As Double, imumCoeli As Double
        
        ascendant = houseResult(0)
        midheaven = houseResult(1)
        descendant = NormalizeDegrees(ascendant + 180)
        imumCoeli = NormalizeDegrees(midheaven + 180)
        
        Debug.Print "  Ascendant: " & Format(ascendant, "0.00") & "°"
        Debug.Print "  Midheaven: " & Format(midheaven, "0.00") & "°"
        Debug.Print "  Descendant: " & Format(descendant, "0.00") & "°"
        Debug.Print "  Imum Coeli: " & Format(imumCoeli, "0.00") & "°"
        
        ' Save Ascendant
        rs.AddNew
        With rs
            !chartID = chartID
            !BodyID = 15  ' Ascendant
            !longitude = ascendant
            !latitude = 0
            !distance = 0
            !LongitudeSpeed = 0
            !LatitudeSpeed = 0
            !HousePosition = 0
            !SignID = GetSignFromLongitude(ascendant)
            !IsRetrograde = False
            !declination = 0
        End With
        rs.Update
        
        ' Save Midheaven
        rs.AddNew
        With rs
            !chartID = chartID
            !BodyID = 16  ' Midheaven
            !longitude = midheaven
            !latitude = 0
            !distance = 0
            !LongitudeSpeed = 0
            !LatitudeSpeed = 0
            !HousePosition = 0
            !SignID = GetSignFromLongitude(midheaven)
            !IsRetrograde = False
            !declination = 0
        End With
        rs.Update
        
        ' Save Descendant
        rs.AddNew
        With rs
            !chartID = chartID
            !BodyID = 17  ' Descendant
            !longitude = descendant
            !latitude = 0
            !distance = 0
            !LongitudeSpeed = 0
            !LatitudeSpeed = 0
            !HousePosition = 0
            !SignID = GetSignFromLongitude(descendant)
            !IsRetrograde = False
            !declination = 0
        End With
        rs.Update
        
        ' Save Imum Coeli
        rs.AddNew
        With rs
            !chartID = chartID
            !BodyID = 18  ' Imum Coeli
            !longitude = imumCoeli
            !latitude = 0
            !distance = 0
            !LongitudeSpeed = 0
            !LatitudeSpeed = 0
            !HousePosition = 0
            !SignID = GetSignFromLongitude(imumCoeli)
            !IsRetrograde = False
            !declination = 0
        End With
        rs.Update
        
        CalculateAndSaveAngles = True
    Else
        Debug.Print "Error: Failed to calculate house angles"
        CalculateAndSaveAngles = False
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    Debug.Print "Error calculating angles: " & Err.Description
    CalculateAndSaveAngles = False
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

' Helper function to determine zodiac sign from longitude
Private Function GetSignFromLongitude(longitude As Double) As Long
    GetSignFromLongitude = Int(longitude / 30) + 1
    If GetSignFromLongitude > 12 Then GetSignFromLongitude = 12
    If GetSignFromLongitude < 1 Then GetSignFromLongitude = 1
End Function


Public Function GenerateEventChart(EventID As Long) As Boolean
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    Dim chartID As Long
    
    ' Event data
    Dim eventDate As Date
    Dim eventTime As Date
    Dim LocationID As Long
    Dim latitude As Double
    Dim longitude As Double
    Dim eventName As String
    
    ' Calculation data
    Dim julianDay As Double
    Dim combinedDateTime As Date
    
    On Error GoTo ErrorHandler
    
    Debug.Print "Starting event chart generation for EventID: " & EventID
    
    Set db = CurrentDb()
    
    ' Get event data
    sql = "SELECT e.EventName, e.EventDate, e.EventTime, e.LocationID, l.Latitude, l.Longitude " & _
          "FROM tblEvents e INNER JOIN tblLocations l ON e.LocationID = l.LocationID " & _
          "WHERE e.EventID = " & EventID
    
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If rs.EOF Then
        Debug.Print "Error: Event not found with ID " & EventID
        GenerateEventChart = False
        Exit Function
    End If
    
    ' Extract event data
    eventName = Nz(rs!eventName, "Unknown Event")
    eventDate = rs!eventDate
    eventTime = rs!eventTime
    LocationID = rs!LocationID
    latitude = rs!latitude
    longitude = rs!longitude
    
    rs.Close
    
    Debug.Print "Event Name: " & eventName
    Debug.Print "Event Date: " & eventDate
    Debug.Print "Event Time: " & eventTime
    Debug.Print "Location: " & latitude & ", " & longitude
    
    ' Check if event chart already exists
    chartID = GetExistingEventChart(EventID)
    If chartID > 0 Then
        Debug.Print "Event chart already exists with ChartID: " & chartID
        Debug.Print "Deleting existing chart..."
        If Not DeleteExistingChart(chartID) Then
            Debug.Print "Error: Failed to delete existing chart"
            GenerateEventChart = False
            Exit Function
        End If
    End If
    
    ' Initialize Swiss Ephemeris
    If Not modSwissItems.InitSwissEph() Then
        Debug.Print "Error: Failed to initialize Swiss Ephemeris"
        GenerateEventChart = False
        Exit Function
    End If
    
    ' Calculate Julian Day
    combinedDateTime = eventDate + timeValue(Format(eventTime, "hh:nn:ss"))
    julianDay = modUtilities.DateToJulianDay(combinedDateTime)
    
    Debug.Print "Julian Day: " & julianDay
    
    ' Create chart record for event
    chartID = CreateEventChartRecord(EventID, "Event", eventDate, eventTime, LocationID)
    If chartID = 0 Then
        Debug.Print "Error: Failed to create chart record"
        GenerateEventChart = False
        Exit Function
    End If
    
    Debug.Print "Created chart record with ChartID: " & chartID
    
    ' Calculate and save planetary positions
    If Not CalculateAndSavePlanets(chartID, julianDay, latitude, longitude) Then
        Debug.Print "Error: Failed to calculate planetary positions"
        GenerateEventChart = False
        Exit Function
    End If
    
    ' Calculate and save house angles
    If Not CalculateAndSaveAngles(chartID, julianDay, latitude, longitude) Then
        Debug.Print "Error: Failed to calculate house angles"
        GenerateEventChart = False
        Exit Function
    End If
    
    
    ' Calculate and save aspects between planets
    If Not CalculateAndSaveAspects(chartID) Then
        Debug.Print "Error: Failed to calculate aspects"
        GenerateEventChart = False
        Exit Function
    End If
    
    
    ' Update event record to mark chart as generated
    db.Execute "UPDATE tblEvents SET EventChartGenerated = True, DateUpdated = Now() WHERE EventID = " & EventID
    Debug.Print "Updated event record to mark chart as generated"
    
    Debug.Print "Event chart generation completed successfully!"
    GenerateEventChart = True
    
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in GenerateEventChart: " & Err.Number & " - " & Err.Description
    GenerateEventChart = False
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

Private Function GetExistingEventChart(EventID As Long) As Long
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    sql = "SELECT ChartID FROM tblCharts WHERE EventID = " & EventID & " AND ChartType = 'Event'"
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If Not rs.EOF Then
        GetExistingEventChart = rs!chartID
    Else
        GetExistingEventChart = 0
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    GetExistingEventChart = 0
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

Private Function CreateEventChartRecord(EventID As Long, chartType As String, ChartDate As Date, ChartTime As Date, LocationID As Long) As Long
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    Set rs = db.OpenRecordset("tblCharts", dbOpenDynaset)
    
    rs.AddNew
    With rs
        ' Set PersonID to Null for event charts
        On Error Resume Next
        !PersonID = Null
        On Error GoTo ErrorHandler
        !EventID = EventID
        ' Set SessionID to Null for event charts
        On Error Resume Next
        !SessionID = Null
        On Error GoTo ErrorHandler
        !chartType = chartType
        !ChartDate = ChartDate
        !ChartTime = ChartTime
        !LocationID = LocationID
        !DateCreated = Now()
        !Notes = "Event chart generated by modSimpleChart"
    End With
    rs.Update
    
    ' Get the ChartID that was just created
    rs.Bookmark = rs.LastModified
    CreateEventChartRecord = rs!chartID
    
    Debug.Print "Event chart record created with ChartID: " & CreateEventChartRecord
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    Debug.Print "Error creating event chart record: " & Err.Number & " - " & Err.Description
    CreateEventChartRecord = 0
    If Not rs Is Nothing Then
        On Error Resume Next
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

' Add this function to your existing modSimpleChart module

Public Function GenerateSessionChart(SessionID As Long) As Boolean
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    Dim chartID As Long
    
    ' Session data
    Dim sessionDate As Date
    Dim sessionTime As Date
    Dim LocationID As Long
    Dim latitude As Double
    Dim longitude As Double
    
    ' Calculation data
    Dim julianDay As Double
    Dim combinedDateTime As Date
    
    On Error GoTo ErrorHandler
    
    Debug.Print "Starting session chart generation for SessionID: " & SessionID
    
    Set db = CurrentDb()
    
    ' Get session data
    sql = "SELECT s.SessionDate, s.SessionStartTime, s.LocationID, l.Latitude, l.Longitude " & _
          "FROM tblSessions s INNER JOIN tblLocations l ON s.LocationID = l.LocationID " & _
          "WHERE s.SessionID = " & SessionID
    
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If rs.EOF Then
        Debug.Print "Error: Session not found with ID " & SessionID
        GenerateSessionChart = False
        Exit Function
    End If
    
    ' Extract session data
    sessionDate = rs!sessionDate
    sessionTime = rs!SessionStartTime
    LocationID = rs!LocationID
    latitude = rs!latitude
    longitude = rs!longitude
    
    rs.Close
    
    Debug.Print "Session Date: " & sessionDate
    Debug.Print "Session Time: " & sessionTime
    Debug.Print "Location: " & latitude & ", " & longitude
    
    ' Check if session chart already exists
    chartID = GetExistingSessionChart(SessionID)
    If chartID > 0 Then
        Debug.Print "Session chart already exists with ChartID: " & chartID
        Debug.Print "Deleting existing chart..."
        If Not DeleteExistingChart(chartID) Then
            Debug.Print "Error: Failed to delete existing chart"
            GenerateSessionChart = False
            Exit Function
        End If
    End If
    
    ' Initialize Swiss Ephemeris
    If Not modSwissItems.InitSwissEph() Then
        Debug.Print "Error: Failed to initialize Swiss Ephemeris"
        GenerateSessionChart = False
        Exit Function
    End If
    
    ' Calculate Julian Day
    combinedDateTime = sessionDate + timeValue(Format(sessionTime, "hh:nn:ss"))
    julianDay = modUtilities.DateToJulianDay(combinedDateTime)
    
    Debug.Print "Julian Day: " & julianDay
    
    ' Create chart record for session
    chartID = CreateSessionChartRecord(SessionID, "Session", sessionDate, sessionTime, LocationID)
    If chartID = 0 Then
        Debug.Print "Error: Failed to create chart record"
        GenerateSessionChart = False
        Exit Function
    End If
    
    Debug.Print "Created chart record with ChartID: " & chartID
    
    ' Calculate and save planetary positions
    If Not CalculateAndSavePlanets(chartID, julianDay, latitude, longitude) Then
        Debug.Print "Error: Failed to calculate planetary positions"
        GenerateSessionChart = False
        Exit Function
    End If
    
    ' Calculate and save house angles
    If Not CalculateAndSaveAngles(chartID, julianDay, latitude, longitude) Then
        Debug.Print "Error: Failed to calculate house angles"
        GenerateSessionChart = False
        Exit Function
    End If
    
    ' Calculate and save aspects between planets
    If Not CalculateAndSaveAspects(chartID) Then
        Debug.Print "Error: Failed to calculate aspects"
        GenerateSessionChart = False
        Exit Function
    End If
    
    ' Update session record to mark chart as generated
    db.Execute "UPDATE tblSessions SET SessionChartGenerated = True, DateUpdated = Now() WHERE SessionID = " & SessionID
    Debug.Print "Updated session record to mark chart as generated"
    
    Debug.Print "Session chart generation completed successfully!"
    GenerateSessionChart = True
    
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in GenerateSessionChart: " & Err.Number & " - " & Err.Description
    GenerateSessionChart = False
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

Private Function GetExistingSessionChart(SessionID As Long) As Long
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    sql = "SELECT ChartID FROM tblCharts WHERE SessionID = " & SessionID & " AND ChartType = 'Session'"
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If Not rs.EOF Then
        GetExistingSessionChart = rs!chartID
    Else
        GetExistingSessionChart = 0
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    GetExistingSessionChart = 0
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

Private Function CreateSessionChartRecord(SessionID As Long, chartType As String, ChartDate As Date, ChartTime As Date, LocationID As Long) As Long
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    Set rs = db.OpenRecordset("tblCharts", dbOpenDynaset)
    
    rs.AddNew
    With rs
        ' Set PersonID and EventID to Null for session charts
        On Error Resume Next
        !PersonID = Null
        !EventID = Null
        On Error GoTo ErrorHandler
        !SessionID = SessionID
        !chartType = chartType
        !ChartDate = ChartDate
        !ChartTime = ChartTime
        !LocationID = LocationID
        !DateCreated = Now()
        !Notes = "Session chart generated by modSimpleChart"
    End With
    rs.Update
    
    ' Get the ChartID that was just created
    rs.Bookmark = rs.LastModified
    CreateSessionChartRecord = rs!chartID
    
    Debug.Print "Session chart record created with ChartID: " & CreateSessionChartRecord
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    Debug.Print "Error creating session chart record: " & Err.Number & " - " & Err.Description
    CreateSessionChartRecord = 0
    If Not rs Is Nothing Then
        On Error Resume Next
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

Private Function CalculateAndSavePlanets(chartID As Long, julianDay As Double, lat As Double, lng As Double) As Boolean
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim rsPlanets As DAO.Recordset
    Dim sql As String
    
    ' Planet calculation variables
    Dim planetData As Variant
    Dim declination As Double
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    
    ' Get active planets from tblCelestialBodies
    sql = "SELECT BodyID, BodyName, SwissEphID FROM tblCelestialBodies " & _
          "WHERE IsActive = True AND BodyType IN ('Planet', 'Asteroid', 'Node') " & _
          "ORDER BY DisplayOrder"
    
    Set rsPlanets = db.OpenRecordset(sql, dbOpenSnapshot)
    Set rs = db.OpenRecordset("tblChartPositions", dbOpenDynaset)
    
    Debug.Print "Calculating planetary positions with full Swiss Ephemeris data..."
    
    Do While Not rsPlanets.EOF
        Debug.Print "Calculating " & rsPlanets!BodyName & " (SwissEphID: " & rsPlanets!swissEphID & ")"
        
        ' Get complete planet data using enhanced Swiss Ephemeris function
        planetData = modSwissItems.GetCompletePlanetData(julianDay, rsPlanets!swissEphID)

        
' Check if calculation was successful (first element won't be -999)
        If IsArray(planetData) And planetData(0) <> -999 Then
            ' Extract values from variant array to double variables
            Dim longitude As Double, latitude As Double, distance As Double
            Dim lonSpeed As Double, latSpeed As Double
            
            longitude = CDbl(planetData(0))
            latitude = CDbl(planetData(1))
            distance = CDbl(planetData(2))
            lonSpeed = CDbl(planetData(3))
            latSpeed = CDbl(planetData(4))
            
            ' Calculate declination (convert ecliptic to equatorial coordinates)
            declination = CalculateDeclination(longitude, latitude, julianDay)
            
            ' Save complete position data to database
            rs.AddNew
            With rs
                !chartID = chartID
                !BodyID = rsPlanets!BodyID
                !longitude = longitude         ' Ecliptic longitude
                !latitude = latitude           ' Ecliptic latitude
                !distance = distance           ' Distance from Earth (AU)
                !LongitudeSpeed = lonSpeed     ' Daily motion in longitude
                !LatitudeSpeed = latSpeed      ' Daily motion in latitude
                !HousePosition = 0             ' Will calculate separately if needed
                !SignID = GetSignFromLongitude(longitude)
                !IsRetrograde = (lonSpeed < 0) ' Retrograde if longitude speed is negative
                !declination = declination     ' Celestial latitude
            End With
            rs.Update
            
            Debug.Print "  " & rsPlanets!BodyName & " at " & Format(longitude, "0.00") & "° " & _
                       "(Sign " & GetSignFromLongitude(longitude) & ") " & _
                       IIf(lonSpeed < 0, "[R] ", "") & _
                       "Speed: " & Format(lonSpeed, "0.00") & "°/day " & _
                       "Dist: " & Format(distance, "0.000") & "AU"
        Else
            Debug.Print "  Failed to calculate " & rsPlanets!BodyName
        End If
        
        
        rsPlanets.MoveNext
    Loop
    
    CalculateAndSavePlanets = True
    
    rs.Close
    rsPlanets.Close
    Set rs = Nothing
    Set rsPlanets = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    Debug.Print "Error calculating planets: " & Err.Description
    CalculateAndSavePlanets = False
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    If Not rsPlanets Is Nothing Then
        rsPlanets.Close
        Set rsPlanets = Nothing
    End If
    Set db = Nothing
End Function

' Helper function to calculate declination (celestial latitude)
Private Function CalculateDeclination(longitude As Double, latitude As Double, julianDay As Double) As Double
    ' This is a simplified calculation. For precise declination, you might want to use
    ' Swiss Ephemeris coordinate conversion functions, but this approximation works well.
    
    ' Get the obliquity of the ecliptic for the given Julian Day
    Dim obliquity As Double
    obliquity = GetObliquity(julianDay)
    
    ' Convert ecliptic coordinates to equatorial coordinates
    ' Declination = arcsin(sin(latitude) * cos(obliquity) + cos(latitude) * sin(obliquity) * sin(longitude))
    
    Dim lonRad As Double, latRad As Double, oblRad As Double
    lonRad = longitude * (3.14159265 / 180)  ' Convert to radians
    latRad = latitude * (3.14159265 / 180)
    oblRad = obliquity * (3.14159265 / 180)
    
    Dim sinDec As Double
    sinDec = Sin(latRad) * Cos(oblRad) + Cos(latRad) * Sin(oblRad) * Sin(lonRad)
    
    ' Convert back to degrees using VBA Atn function for arcsine
    CalculateDeclination = (180 / 3.14159265) * Atn(sinDec / Sqr(1 - sinDec * sinDec))
End Function

' Helper function to get obliquity of ecliptic for given Julian Day
Private Function GetObliquity(julianDay As Double) As Double
    ' Simplified formula for obliquity of ecliptic (accurate enough for astrological purposes)
    ' Based on IAU 1980 formula
    Dim T As Double
    T = (julianDay - 2451545#) / 36525#  ' Julian centuries from J2000.0
    
    ' Obliquity in degrees
    GetObliquity = 23.4392911 - 0.0130042 * T - 0.00000164 * T * T + 0.000000504 * T * T * T
End Function

' Replace the existing CalculateAndSaveAspects function in modSimpleChart with this enhanced version:

Private Function CalculateAndSaveAspects(chartID As Long) As Boolean
    Dim db As DAO.Database
    Dim rsPlanets As DAO.Recordset
    Dim rsAngles As DAO.Recordset
    Dim rsAspects As DAO.Recordset
    Dim rsAspectTypes As DAO.Recordset
    Dim sql As String
    
    ' Variables for aspect calculation
    Dim planet1ID As Long, planet2ID As Long
    Dim longitude1 As Double, longitude2 As Double
    Dim angularDiff As Double, ExactDegree As Double
    Dim aspectFound As Boolean
    Dim useDefaultOrbs As Boolean
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    
    Debug.Print "Calculating aspects for ChartID: " & chartID
    
    ' Check if we should use default orbs from tblAspects
    useDefaultOrbs = GetDefaultOrbsSetting()
    Debug.Print "Using default orbs: " & useDefaultOrbs
    
    ' Get all planetary positions for this chart (planets, asteroids, nodes)
    sql = "SELECT cp.BodyID, cp.Longitude, cb.BodyName, cb.BodyType " & _
          "FROM tblChartPositions cp INNER JOIN tblCelestialBodies cb ON cp.BodyID = cb.BodyID " & _
          "WHERE cp.ChartID = " & chartID & " AND cb.BodyType IN ('Planet', 'Asteroid', 'Node') " & _
          "ORDER BY cp.BodyID"
    
    Set rsPlanets = db.OpenRecordset(sql, dbOpenSnapshot)
    
    ' Get all angle positions for this chart (ASC, MC, DESC, IC)
    sql = "SELECT cp.BodyID, cp.Longitude, cb.BodyName, cb.BodyType " & _
          "FROM tblChartPositions cp INNER JOIN tblCelestialBodies cb ON cp.BodyID = cb.BodyID " & _
          "WHERE cp.ChartID = " & chartID & " AND cb.BodyType = 'Angle' " & _
          "ORDER BY cp.BodyID"
    
    Set rsAngles = db.OpenRecordset(sql, dbOpenSnapshot)
    
    ' Get aspect definitions with orb values
    sql = "SELECT AspectID, AspectName, Angle, OrbitMajor, OrbitMinor, AspectType FROM tblAspects ORDER BY AspectID"
    Set rsAspectTypes = db.OpenRecordset(sql, dbOpenSnapshot)
    
    ' Open recordset for saving aspects
    Set rsAspects = db.OpenRecordset("tblChartAspects", dbOpenDynaset)
    
    Debug.Print "=== CALCULATING PLANET-TO-PLANET ASPECTS ==="
    
    ' PART 1: Calculate Planet-to-Planet Aspects
    rsPlanets.MoveFirst
    Do While Not rsPlanets.EOF
        planet1ID = rsPlanets!BodyID
        longitude1 = rsPlanets!longitude
        
        ' Compare with all subsequent planets (avoid duplicates)
        Dim rsPlanets2 As DAO.Recordset
        Set rsPlanets2 = rsPlanets.Clone
        rsPlanets2.MoveNext
        
        Do While Not rsPlanets2.EOF
            planet2ID = rsPlanets2!BodyID
            longitude2 = rsPlanets2!longitude
            
            ' Calculate and save aspects between these two planets
            Call CalculateAspectsBetweenBodies(chartID, planet1ID, longitude1, planet2ID, longitude2, _
                                             rsAspectTypes, rsAspects, "Planet")
            
            rsPlanets2.MoveNext
        Loop
        
        rsPlanets2.Close
        Set rsPlanets2 = Nothing
        rsPlanets.MoveNext
    Loop
    
    Debug.Print "=== CALCULATING PLANET-TO-ANGLE ASPECTS ==="
    
    ' PART 2: Calculate Planet-to-Angle Aspects
    rsPlanets.MoveFirst
    Do While Not rsPlanets.EOF
        planet1ID = rsPlanets!BodyID
        longitude1 = rsPlanets!longitude
        
        ' Compare this planet with all angles
        rsAngles.MoveFirst
        Do While Not rsAngles.EOF
            planet2ID = rsAngles!BodyID
            longitude2 = rsAngles!longitude
            
            ' Calculate and save aspects between planet and angle
            Call CalculateAspectsBetweenBodies(chartID, planet1ID, longitude1, planet2ID, longitude2, _
                                             rsAspectTypes, rsAspects, "Angle")
            
            rsAngles.MoveNext
        Loop
        
        rsPlanets.MoveNext
    Loop
    
    CalculateAndSaveAspects = True
    
    ' Cleanup
    rsPlanets.Close
    rsAngles.Close
    rsAspectTypes.Close
    rsAspects.Close
    Set rsPlanets = Nothing
    Set rsAngles = Nothing
    Set rsAspectTypes = Nothing
    Set rsAspects = Nothing
    Set db = Nothing
    
    Debug.Print "Aspect calculation completed successfully!"
    Exit Function
    
ErrorHandler:
    Debug.Print "Error calculating aspects: " & Err.Description
    CalculateAndSaveAspects = False
    
    ' Cleanup on error
    If Not rsPlanets Is Nothing Then
        rsPlanets.Close
        Set rsPlanets = Nothing
    End If
    If Not rsAngles Is Nothing Then
        rsAngles.Close
        Set rsAngles = Nothing
    End If
    If Not rsAspectTypes Is Nothing Then
        rsAspectTypes.Close
        Set rsAspectTypes = Nothing
    End If
    If Not rsAspects Is Nothing Then
        rsAspects.Close
        Set rsAspects = Nothing
    End If
    Set db = Nothing
End Function


' Helper function to calculate angular difference between two longitudes
Private Function CalculateAngularDifference(longitude1 As Double, longitude2 As Double) As Double
    Dim diff As Double
    
    ' Calculate absolute difference
    diff = Abs(longitude1 - longitude2)
    
    ' Normalize to shortest arc (0-180 degrees)
    If diff > 180 Then
        diff = 360 - diff
    End If
    
    CalculateAngularDifference = diff
End Function

' Helper function to check if angular difference is within orb for an aspect
Private Function IsAspectInOrb(angularDiff As Double, aspectAngle As Double, majorOrb As Double, _
                              minorOrb As Double, planet1ID As Long, planet2ID As Long, _
                              ByRef ExactDegree As Double) As Boolean
    
    Dim orb As Double
    Dim difference As Double
    
    ' Determine which orb to use based on planet hierarchy
    orb = GetEffectiveOrb(majorOrb, minorOrb, planet1ID, planet2ID)
    
    ' Calculate how far the actual difference is from the exact aspect angle
    difference = Abs(angularDiff - aspectAngle)
    
    ' Check if within orb
    If difference <= orb Then
        ExactDegree = difference  ' How many degrees off from exact
        IsAspectInOrb = True
    Else
        IsAspectInOrb = False
    End If
End Function

' New function to determine effective orb based on planet hierarchy
Private Function GetEffectiveOrb(majorOrb As Double, minorOrb As Double, planet1ID As Long, planet2ID As Long) As Double
    Dim planet1Rank As Integer, planet2Rank As Integer
    Dim effectiveRank As Integer
    
    ' Get planetary hierarchy ranks
    planet1Rank = GetPlanetaryRank(planet1ID)
    planet2Rank = GetPlanetaryRank(planet2ID)
    
    ' Use the highest rank (lowest number) to determine orb
    ' This means if Sun (rank 1) aspects Pluto (rank 4), we use Sun's larger orb
    effectiveRank = IIf(planet1Rank <= planet2Rank, planet1Rank, planet2Rank)
    
    ' Determine orb based on the most important planet in the aspect
    Select Case effectiveRank
        Case 1, 2  ' Sun, Moon - use major orb
            GetEffectiveOrb = majorOrb
        Case 3     ' Major planets (Mercury, Venus, Mars, Jupiter, Saturn) - use major orb
            GetEffectiveOrb = majorOrb
        Case 4     ' Outer planets (Uranus, Neptune, Pluto) - use average of major/minor
            GetEffectiveOrb = (majorOrb + minorOrb) / 2
        Case 5     ' Asteroids, Nodes - use minor orb
            GetEffectiveOrb = minorOrb
        Case 6     ' Angles - use minor orb
            GetEffectiveOrb = minorOrb
        Case Else  ' Unknown - use minor orb as safe default
            GetEffectiveOrb = minorOrb
    End Select
    
    Debug.Print "  Orb calculation: " & GetPlanetName(planet1ID) & " (rank " & planet1Rank & ") + " & _
               GetPlanetName(planet2ID) & " (rank " & planet2Rank & ") = " & _
               Format(GetEffectiveOrb, "0.0") & "° orb"
End Function

' New function to assign planetary hierarchy ranks for orb calculations
Private Function GetPlanetaryRank(BodyID As Long) As Integer
    ' Get the planet's Swiss Ephemeris ID and type to determine rank
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    Dim swissID As Long
    Dim bodyType As String
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    sql = "SELECT SwissEphID, BodyType, BodyName FROM tblCelestialBodies WHERE BodyID = " & BodyID
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If Not rs.EOF Then
        swissID = Nz(rs!swissEphID, -999)
        bodyType = Nz(rs!bodyType, "Unknown")
        
        ' Assign ranks based on astrological hierarchy
        Select Case swissID
            Case 0      ' Sun
                GetPlanetaryRank = 1
            Case 1      ' Moon
                GetPlanetaryRank = 2
            Case 2, 3, 4, 5, 6  ' Mercury, Venus, Mars, Jupiter, Saturn
                GetPlanetaryRank = 3
            Case 7, 8, 9        ' Uranus, Neptune, Pluto
                GetPlanetaryRank = 4
            Case 11, 15, 17     ' Nodes, Chiron, Ceres (Asteroids)
                GetPlanetaryRank = 5
            Case -1, -2, -3, -4 ' Angles (ASC, MC, DESC, IC)
                GetPlanetaryRank = 6
            Case Else
                ' Check by body type for any we missed
                Select Case bodyType
                    Case "Planet"
                        GetPlanetaryRank = 3  ' Default for planets
                    Case "Asteroid", "Node"
                        GetPlanetaryRank = 5  ' Minor bodies
                    Case "Angle"
                        GetPlanetaryRank = 6  ' Chart angles
                    Case Else
                        GetPlanetaryRank = 7  ' Unknown/other
                End Select
        End Select
    Else
        GetPlanetaryRank = 7  ' Unknown body
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    GetPlanetaryRank = 7  ' Safe default on error
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

' Helper function to get default orbs setting
Private Function GetDefaultOrbsSetting() As Boolean
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    sql = "SELECT DefaultOrbs FROM tblSwissEphSettings WHERE SettingID = 1"
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If Not rs.EOF Then
        GetDefaultOrbsSetting = Nz(rs!DefaultOrbs, True)
    Else
        GetDefaultOrbsSetting = True  ' Default to True if no setting found
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    GetDefaultOrbsSetting = True  ' Default to True on error
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

' Helper function to get planet name by BodyID
Private Function GetPlanetName(BodyID As Long) As String
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    sql = "SELECT BodyName FROM tblCelestialBodies WHERE BodyID = " & BodyID
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    If Not rs.EOF Then
        GetPlanetName = rs!BodyName
    Else
        GetPlanetName = "Unknown"
    End If
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    Exit Function
    
ErrorHandler:
    GetPlanetName = "Error"
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function


' Function to determine if an aspect is applying or separating
Private Function IsAspectApplying(chartID As Long, body1ID As Long, body2ID As Long, _
                                aspectAngle As Double) As Boolean
    
    Dim db As DAO.Database
    Dim rs As DAO.Recordset
    Dim sql As String
    
    ' Planet data variables
    Dim lon1 As Double, lon2 As Double
    Dim speed1 As Double, speed2 As Double
    Dim angularDiff As Double
    Dim relativeSpeed As Double
    Dim futureAngularDiff As Double
    
    On Error GoTo ErrorHandler
    
    Set db = CurrentDb()
    
    ' Get positions and speeds for both bodies
    sql = "SELECT cp.BodyID, cp.Longitude, cp.LongitudeSpeed " & _
          "FROM tblChartPositions cp " & _
          "WHERE cp.ChartID = " & chartID & " AND cp.BodyID IN (" & body1ID & "," & body2ID & ")"
    
    Set rs = db.OpenRecordset(sql, dbOpenSnapshot)
    
    ' Extract data for each body
    Do While Not rs.EOF
        If rs!BodyID = body1ID Then
            lon1 = rs!longitude
            speed1 = Nz(rs!LongitudeSpeed, 0)
        ElseIf rs!BodyID = body2ID Then
            lon2 = rs!longitude
            speed2 = Nz(rs!LongitudeSpeed, 0)
        End If
        rs.MoveNext
    Loop
    
    rs.Close
    Set rs = Nothing
    Set db = Nothing
    
    ' Calculate current angular difference
    angularDiff = CalculateAngularDifference(lon1, lon2)
    
    ' Calculate relative speed (how fast the angle between them is changing)
    relativeSpeed = speed1 - speed2
    
    ' Project positions forward by 1 day to see if they're getting closer or farther
    Dim futureLon1 As Double, futureLon2 As Double
    futureLon1 = NormalizeDegrees(lon1 + speed1)
    futureLon2 = NormalizeDegrees(lon2 + speed2)
    
    ' Calculate future angular difference
    futureAngularDiff = CalculateAngularDifference(futureLon1, futureLon2)
    
    ' Determine if aspect is applying or separating
    ' For the specific aspect angle, check if they're getting closer to that exact angle
    Dim currentDiffFromAspect As Double, futureDiffFromAspect As Double
    
    currentDiffFromAspect = Abs(angularDiff - aspectAngle)
    futureDiffFromAspect = Abs(futureAngularDiff - aspectAngle)
    
    ' If future difference is smaller, aspect is applying
    ' If future difference is larger, aspect is separating
    IsAspectApplying = (futureDiffFromAspect < currentDiffFromAspect)
    
    Debug.Print "    Applying/Separating analysis: " & GetPlanetName(body1ID) & " to " & GetPlanetName(body2ID)
    Debug.Print "      Current diff from " & aspectAngle & "°: " & Format(currentDiffFromAspect, "0.00") & "°"
    Debug.Print "      Future diff from " & aspectAngle & "°: " & Format(futureDiffFromAspect, "0.00") & "°"
    Debug.Print "      Result: " & IIf(IsAspectApplying, "APPLYING", "SEPARATING")
    
    Exit Function
    
ErrorHandler:
    Debug.Print "Error in IsAspectApplying: " & Err.Description
    IsAspectApplying = True  ' Default to applying on error
    If Not rs Is Nothing Then
        rs.Close
        Set rs = Nothing
    End If
    Set db = Nothing
End Function

' Enhanced CalculateAspectsBetweenBodies function with applying/separating detection
Private Sub CalculateAspectsBetweenBodies(chartID As Long, body1ID As Long, longitude1 As Double, _
                                        body2ID As Long, longitude2 As Double, _
                                        rsAspectTypes As DAO.Recordset, rsAspects As DAO.Recordset, _
                                        targetType As String)
    
    Dim angularDiff As Double, ExactDegree As Double
    Dim aspectFound As Boolean
    Dim IsApplying As Boolean
    
    ' Calculate angular difference
    angularDiff = CalculateAngularDifference(longitude1, longitude2)
    
    ' Check each aspect type to see if this difference falls within orb
    rsAspectTypes.MoveFirst
    Do While Not rsAspectTypes.EOF
        aspectFound = False
        ExactDegree = 0
        
        ' Check if angular difference matches this aspect within orb
        If IsAspectInOrb(angularDiff, rsAspectTypes!angle, rsAspectTypes!OrbitMajor, _
                        rsAspectTypes!OrbitMinor, body1ID, body2ID, ExactDegree) Then
            aspectFound = True
            
            ' Determine if aspect is applying or separating
            ' Skip applying/separating calculation for angles (they don't move)
            If targetType = "Angle" Then
                IsApplying = True  ' Default for angles
            Else
                IsApplying = IsAspectApplying(chartID, body1ID, body2ID, rsAspectTypes!angle)
            End If
        End If
        
        ' Save aspect if found
        If aspectFound Then
            rsAspects.AddNew
            With rsAspects
                !chartID = chartID
                !body1ID = body1ID
                !body2ID = body2ID
                !aspectID = rsAspectTypes!aspectID
                !OrbitApplying = IsApplying
                !ExactDegree = ExactDegree
                !Notes = "Auto-calculated " & targetType & " aspect - " & IIf(IsApplying, "Applying", "Separating")
            End With
            rsAspects.Update
            
            Debug.Print "  Found " & rsAspectTypes!AspectName & " between " & _
                       GetPlanetName(body1ID) & " and " & GetPlanetName(body2ID) & _
                       " (orb: " & Format(ExactDegree, "0.00") & "°) [" & _
                       IIf(IsApplying, "APPLYING", "SEPARATING") & "]"
        End If
        
        rsAspectTypes.MoveNext
    Loop
End Sub

' Helper function for degree normalization (ensure we have this)
Private Function NormalizeDegrees(degrees As Double) As Double
    NormalizeDegrees = degrees
    Do While NormalizeDegrees >= 360
        NormalizeDegrees = NormalizeDegrees - 360
    Loop
    Do While NormalizeDegrees < 0
        NormalizeDegrees = NormalizeDegrees + 360
    Loop
End Function
